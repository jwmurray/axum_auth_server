name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      run: |
        export JWT_SECRET=secret
        cargo build --verbose
        # Run only unit/bin tests, skip the 'api' integration crate that includes droplet tests
        cargo test --verbose --lib --bins

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        files: |
          compose.yml
          compose.override.yml
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Copy compose.yml to droplet
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
        chmod 600 private_key
        scp -i private_key -o StrictHostKeyChecking=no compose.yml root@${{ vars.DROPLET_IP }}:~

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~  
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export AUTH_SERVICE_IP=${{ vars.DROPLET_IP }}
          export ACME_EMAIL=${{ vars.ACME_EMAIL }}
          docker compose down
          docker compose pull
          docker compose up -d
    - name: Post-deploy prod checks
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          # basic health checks via Traefik
          curl -fsS -o /dev/null https://axum.gardenway.org/auth/hello
          curl -fsS -o /dev/null -X POST https://axum.gardenway.org/auth/signup \
            -H 'Content-Type: application/json' \
            -d '{"email":"ci+'$(date +%s)'@example.com","password":"pw123456","requires2FA":false}'